# Just configuration file for running commands.
#
# For more information, visit https://just.systems.

set script-interpreter := ["nu"]
set shell := ["nu", "--commands"]
set unstable := true
set windows-shell := ["nu", "--commands"]
export PATH := if os() == "windows" {
  justfile_dir() / ".vendor/bin;" + env("PATH")
} else {
  justfile_dir() / ".vendor/bin:" + env("PATH")
}

# List all commands available in justfile.
list:
  @just --list

# Execute CI workflow commands.
ci: setup lint doc build test

# Build distribution package.
build:
  uv build --out-dir build/dist

# Build documentation.
[script]
doc:
  mkdir build/site
  cp README.md doc/index.md
  cp CONTRIBUTING.md LICENSE.md doc/
  uv run mkdocs build --strict

# Fix code formatting.
format:
  {% if cookiecutter.prettier_support == "yes" -%}
  deno run --allow-all npm:prettier --write .
  {% endif -%}
  uv run ruff format .

# Install project programs.
[script]
install: build
  python3 -m pip install (ls build/dist/*.whl | get name | first)

# Run code analyses.
lint:
  {% if cookiecutter.prettier_support == "yes" -%}
  deno run --allow-all npm:prettier --check .
  {% endif -%}
  uv run ruff format --check .
  uv run ruff check .
  uv run mypy .

# Install development dependencies.
[script]
setup: _setup
  {% if cookiecutter.prettier_support == "yes" -%}
  if (which deno | is-empty) {
    http get https://scruffaluff.github.io/picoware/install/deno.nu
    | nu -c $"($in | decode); main --preserve-env --dest .vendor/bin"
  }
  deno --version
  {% endif -%}
  if (which uv | is-empty) {
    http get https://scruffaluff.github.io/picoware/install/uv.nu
    | nu -c $"($in | decode); main --preserve-env --dest .vendor/bin"
  }
  uv --version
  if ($env.JUST_INIT? | is-empty) {
    uv sync --locked
  } else {
    uv sync
  }

[unix]
_setup:
  #!/usr/bin/env sh
  set -eu
  if [ ! -x "$(command -v nu)" ]; then
    curl --fail --location --show-error \
      https://scruffaluff.github.io/picoware/install/nushell.sh | sh -s -- \
      --preserve-env --dest .vendor/bin
  fi
  echo "Nushell $(nu --version)"

[windows]
_setup:
  #!powershell.exe
  $ErrorActionPreference = 'Stop'
  $ProgressPreference = 'SilentlyContinue'
  $PSNativeCommandUseErrorActionPreference = $True
  if (-not (Get-Command -ErrorAction SilentlyContinue nu)) {
    $NushellScript = Invoke-WebRequest -UseBasicParsing -Uri `
      https://scruffaluff.github.io/picoware/install/nushell.ps1
    Invoke-Expression "& { $NushellScript } --preserve-env --dest .vendor/bin"
  }
  Write-Output "Nushell $(nu --version)"

# Run test suites.
test *args:
  uv run pytest --cov {{ "{{" }}args{{ "}}" }}

# Run test suite for multiple Python versions.
[script]
test-ver versions="3.9,3.10,3.11,3.12,3.13":
  let versions = "{{ "{{" }}versions{{ "}}" }}" | split row ","
  for version in $versions { uv run --python $version pytest }

# Wrapper to Uv.
[no-exit-message]
@uv *args:
  uv {{ "{{" }}args{{ "}}" }}

