# Python configuration file for building, dependencies, and tooling.
#
# For more information, visit
# https://snarky.ca/what-the-heck-is-pyproject-toml/.

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling~=1.0"]

[dependency-groups]
dev = [
  "coverage[toml]~=7.10.0",
  "mkdocs~=1.6",
  "mkdocs-material~=9.6",
  "mkdocstrings~=0.30.0",
  "mypy~=1.17",
  "pymdown-extensions~=10.15",
  "pytest~=8.4",
  "pytest-cov~=6.2",
  "pytest-mock~=3.14",
  "ruff~=0.12.0",
  "toml~=0.10.0",
  "types-toml~=0.10.0",
]

[project]
{%- if cookiecutter.project_cli == "yes" %}
dependencies = [
    "typer~=0.16.0",
]
{%- else %}
dependencies = []
{%- endif %}
description = "{{ cookiecutter.project_description }}"
keywords = []
name = "{{ cookiecutter.project_name }}"
readme = "README.md"
requires-python = ">=3.9.0,<4.0.0"
version = "0.1.0"

{% if cookiecutter.project_cli == "yes" -%}
[project.scripts]
{{ cookiecutter.project_name }} = "{{ cookiecutter.__project_package }}.__main__:cli"
{% endif -%}

[tool.coverage.report]
exclude_lines = [
  "if sys.version_info.*",
  "pragma: no cover",
  "raise NotImplementedError",
]
fail_under = 100
show_missing = true

[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = []
source = ["{{ cookiecutter.__project_package }}"]

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.__project_package }}"]

[tool.mypy]
cache_dir = ".vendor/cache/mypy"
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = true
exclude = [
  '\.benchmarks/',
  '\.hypothesis/',
  '\.vendor/',
  '\.venv/',
  'tmp/',
]
ignore_missing_imports = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "-sv"
cache_dir = ".vendor/cache/pytest"
markers = [
  "e2e: mark as end to end test.",
  "unit: mark as unit test.",
]
python_files = ["__init__.py", "*_test.py"]
testpaths = ["src", "test"]

[tool.ruff]
cache-dir = ".vendor/cache/ruff"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
pydocstyle = { convention = "google" }
ignore = [
  "COM", # Rule conflicts with formatter.
  "FBT", # Boolean function arguments are acceptable.
  "FIX", # Todo comments are acceptable.
  "ICN", # Import abbreviations reduce readability.
  "S101", # Assert statements are standard for test functions.
  "S603", # Rule warns about using subprocess commands without a solution.
  "S607", # Partial paths for process executables is more cross platform.
  "T201", # Print statements are acceptable for CLI applications.
  "TD", # Todo formatting is excessive for personal projects.
]
select = ["ALL"]
